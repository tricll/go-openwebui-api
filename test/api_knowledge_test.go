/*
FastAPI

Testing KnowledgeAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/tricll/go-openwebui-api"
	"testing"
)

func Test_openapi_KnowledgeAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test KnowledgeAPIService AddFileToKnowledgeByIdKnowledgeIdFileAddPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.KnowledgeAPI.AddFileToKnowledgeByIdKnowledgeIdFileAddPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeAPIService CreateNewKnowledgeKnowledgeCreatePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KnowledgeAPI.CreateNewKnowledgeKnowledgeCreatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeAPIService DeleteKnowledgeByIdKnowledgeIdDeleteDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.KnowledgeAPI.DeleteKnowledgeByIdKnowledgeIdDeleteDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeAPIService GetKnowledgeByIdKnowledgeIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.KnowledgeAPI.GetKnowledgeByIdKnowledgeIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeAPIService GetKnowledgeKnowledgeGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KnowledgeAPI.GetKnowledgeKnowledgeGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeAPIService GetKnowledgeListKnowledgeListGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.KnowledgeAPI.GetKnowledgeListKnowledgeListGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeAPIService RemoveFileFromKnowledgeByIdKnowledgeIdFileRemovePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.KnowledgeAPI.RemoveFileFromKnowledgeByIdKnowledgeIdFileRemovePost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeAPIService ResetKnowledgeByIdKnowledgeIdResetPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.KnowledgeAPI.ResetKnowledgeByIdKnowledgeIdResetPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeAPIService UpdateFileFromKnowledgeByIdKnowledgeIdFileUpdatePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.KnowledgeAPI.UpdateFileFromKnowledgeByIdKnowledgeIdFileUpdatePost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test KnowledgeAPIService UpdateKnowledgeByIdKnowledgeIdUpdatePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.KnowledgeAPI.UpdateKnowledgeByIdKnowledgeIdUpdatePost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
