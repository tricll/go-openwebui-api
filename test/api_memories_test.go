/*
FastAPI

Testing MemoriesAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/tricll/go-openwebui-api"
	"testing"
)

func Test_openapi_MemoriesAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test MemoriesAPIService AddMemoryMemoriesAddPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MemoriesAPI.AddMemoryMemoriesAddPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MemoriesAPIService DeleteMemoryByIdMemoriesMemoryIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var memoryId string

		resp, httpRes, err := apiClient.MemoriesAPI.DeleteMemoryByIdMemoriesMemoryIdDelete(context.Background(), memoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MemoriesAPIService DeleteMemoryByUserIdMemoriesDeleteUserDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MemoriesAPI.DeleteMemoryByUserIdMemoriesDeleteUserDelete(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MemoriesAPIService GetEmbeddingsMemoriesEfGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MemoriesAPI.GetEmbeddingsMemoriesEfGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MemoriesAPIService GetMemoriesMemoriesGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MemoriesAPI.GetMemoriesMemoriesGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MemoriesAPIService QueryMemoryMemoriesQueryPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MemoriesAPI.QueryMemoryMemoriesQueryPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MemoriesAPIService ResetMemoryFromVectorDbMemoriesResetPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.MemoriesAPI.ResetMemoryFromVectorDbMemoriesResetPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test MemoriesAPIService UpdateMemoryByIdMemoriesMemoryIdUpdatePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var memoryId string

		resp, httpRes, err := apiClient.MemoriesAPI.UpdateMemoryByIdMemoriesMemoryIdUpdatePost(context.Background(), memoryId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
