/*
FastAPI

Testing PromptsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/tricll/go-openwebui-api"
	"testing"
)

func Test_openapi_PromptsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PromptsAPIService CreateNewPromptPromptsCreatePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PromptsAPI.CreateNewPromptPromptsCreatePost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PromptsAPIService DeletePromptByCommandPromptsCommandCommandDeleteDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var command string

		resp, httpRes, err := apiClient.PromptsAPI.DeletePromptByCommandPromptsCommandCommandDeleteDelete(context.Background(), command).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PromptsAPIService GetPromptByCommandPromptsCommandCommandGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var command string

		resp, httpRes, err := apiClient.PromptsAPI.GetPromptByCommandPromptsCommandCommandGet(context.Background(), command).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PromptsAPIService GetPromptListPromptsListGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PromptsAPI.GetPromptListPromptsListGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PromptsAPIService GetPromptsPromptsGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.PromptsAPI.GetPromptsPromptsGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PromptsAPIService UpdatePromptByCommandPromptsCommandCommandUpdatePost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var command string

		resp, httpRes, err := apiClient.PromptsAPI.UpdatePromptByCommandPromptsCommandCommandUpdatePost(context.Background(), command).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
