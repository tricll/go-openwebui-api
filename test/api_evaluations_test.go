/*
FastAPI

Testing EvaluationsAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	openapiclient "github.com/tricll/go-openwebui-api"
	"testing"
)

func Test_openapi_EvaluationsAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EvaluationsAPIService CreateFeedbackEvaluationsFeedbackPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EvaluationsAPI.CreateFeedbackEvaluationsFeedbackPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EvaluationsAPIService DeleteAllFeedbacksEvaluationsFeedbacksAllDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EvaluationsAPI.DeleteAllFeedbacksEvaluationsFeedbacksAllDelete(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EvaluationsAPIService DeleteFeedbackByIdEvaluationsFeedbackIdDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.EvaluationsAPI.DeleteFeedbackByIdEvaluationsFeedbackIdDelete(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EvaluationsAPIService DeleteFeedbacksEvaluationsFeedbacksDelete", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EvaluationsAPI.DeleteFeedbacksEvaluationsFeedbacksDelete(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EvaluationsAPIService GetAllFeedbacksEvaluationsFeedbacksAllExportGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EvaluationsAPI.GetAllFeedbacksEvaluationsFeedbacksAllExportGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EvaluationsAPIService GetAllFeedbacksEvaluationsFeedbacksAllGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EvaluationsAPI.GetAllFeedbacksEvaluationsFeedbacksAllGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EvaluationsAPIService GetConfigEvaluationsConfigGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EvaluationsAPI.GetConfigEvaluationsConfigGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EvaluationsAPIService GetFeedbackByIdEvaluationsFeedbackIdGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.EvaluationsAPI.GetFeedbackByIdEvaluationsFeedbackIdGet(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EvaluationsAPIService GetFeedbacksEvaluationsFeedbacksUserGet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EvaluationsAPI.GetFeedbacksEvaluationsFeedbacksUserGet(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EvaluationsAPIService UpdateConfigEvaluationsConfigPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.EvaluationsAPI.UpdateConfigEvaluationsConfigPost(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EvaluationsAPIService UpdateFeedbackByIdEvaluationsFeedbackIdPost", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.EvaluationsAPI.UpdateFeedbackByIdEvaluationsFeedbackIdPost(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
