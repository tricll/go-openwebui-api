/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openwebuiapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FolderModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FolderModel{}

// FolderModel struct for FolderModel
type FolderModel struct {
	Id string `json:"id"`
	ParentId NullableString `json:"parent_id,omitempty"`
	UserId string `json:"user_id"`
	Name string `json:"name"`
	Items map[string]interface{} `json:"items,omitempty"`
	Meta map[string]interface{} `json:"meta,omitempty"`
	IsExpanded *bool `json:"is_expanded,omitempty"`
	CreatedAt int32 `json:"created_at"`
	UpdatedAt int32 `json:"updated_at"`
}

type _FolderModel FolderModel

// NewFolderModel instantiates a new FolderModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolderModel(id string, userId string, name string, createdAt int32, updatedAt int32) *FolderModel {
	this := FolderModel{}
	this.Id = id
	this.UserId = userId
	this.Name = name
	var isExpanded bool = false
	this.IsExpanded = &isExpanded
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewFolderModelWithDefaults instantiates a new FolderModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFolderModelWithDefaults() *FolderModel {
	this := FolderModel{}
	var isExpanded bool = false
	this.IsExpanded = &isExpanded
	return &this
}

// GetId returns the Id field value
func (o *FolderModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FolderModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FolderModel) SetId(v string) {
	o.Id = v
}

// GetParentId returns the ParentId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FolderModel) GetParentId() string {
	if o == nil || IsNil(o.ParentId.Get()) {
		var ret string
		return ret
	}
	return *o.ParentId.Get()
}

// GetParentIdOk returns a tuple with the ParentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FolderModel) GetParentIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.ParentId.Get(), o.ParentId.IsSet()
}

// HasParentId returns a boolean if a field has been set.
func (o *FolderModel) HasParentId() bool {
	if o != nil && o.ParentId.IsSet() {
		return true
	}

	return false
}

// SetParentId gets a reference to the given NullableString and assigns it to the ParentId field.
func (o *FolderModel) SetParentId(v string) {
	o.ParentId.Set(&v)
}
// SetParentIdNil sets the value for ParentId to be an explicit nil
func (o *FolderModel) SetParentIdNil() {
	o.ParentId.Set(nil)
}

// UnsetParentId ensures that no value is present for ParentId, not even an explicit nil
func (o *FolderModel) UnsetParentId() {
	o.ParentId.Unset()
}

// GetUserId returns the UserId field value
func (o *FolderModel) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *FolderModel) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *FolderModel) SetUserId(v string) {
	o.UserId = v
}

// GetName returns the Name field value
func (o *FolderModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *FolderModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *FolderModel) SetName(v string) {
	o.Name = v
}

// GetItems returns the Items field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FolderModel) GetItems() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Items
}

// GetItemsOk returns a tuple with the Items field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FolderModel) GetItemsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Items) {
		return map[string]interface{}{}, false
	}
	return o.Items, true
}

// HasItems returns a boolean if a field has been set.
func (o *FolderModel) HasItems() bool {
	if o != nil && !IsNil(o.Items) {
		return true
	}

	return false
}

// SetItems gets a reference to the given map[string]interface{} and assigns it to the Items field.
func (o *FolderModel) SetItems(v map[string]interface{}) {
	o.Items = v
}

// GetMeta returns the Meta field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FolderModel) GetMeta() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FolderModel) GetMetaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Meta) {
		return map[string]interface{}{}, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *FolderModel) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]interface{} and assigns it to the Meta field.
func (o *FolderModel) SetMeta(v map[string]interface{}) {
	o.Meta = v
}

// GetIsExpanded returns the IsExpanded field value if set, zero value otherwise.
func (o *FolderModel) GetIsExpanded() bool {
	if o == nil || IsNil(o.IsExpanded) {
		var ret bool
		return ret
	}
	return *o.IsExpanded
}

// GetIsExpandedOk returns a tuple with the IsExpanded field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FolderModel) GetIsExpandedOk() (*bool, bool) {
	if o == nil || IsNil(o.IsExpanded) {
		return nil, false
	}
	return o.IsExpanded, true
}

// HasIsExpanded returns a boolean if a field has been set.
func (o *FolderModel) HasIsExpanded() bool {
	if o != nil && !IsNil(o.IsExpanded) {
		return true
	}

	return false
}

// SetIsExpanded gets a reference to the given bool and assigns it to the IsExpanded field.
func (o *FolderModel) SetIsExpanded(v bool) {
	o.IsExpanded = &v
}

// GetCreatedAt returns the CreatedAt field value
func (o *FolderModel) GetCreatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *FolderModel) GetCreatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *FolderModel) SetCreatedAt(v int32) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *FolderModel) GetUpdatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *FolderModel) GetUpdatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *FolderModel) SetUpdatedAt(v int32) {
	o.UpdatedAt = v
}

func (o FolderModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FolderModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.ParentId.IsSet() {
		toSerialize["parent_id"] = o.ParentId.Get()
	}
	toSerialize["user_id"] = o.UserId
	toSerialize["name"] = o.Name
	if o.Items != nil {
		toSerialize["items"] = o.Items
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.IsExpanded) {
		toSerialize["is_expanded"] = o.IsExpanded
	}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	return toSerialize, nil
}

func (o *FolderModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"user_id",
		"name",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFolderModel := _FolderModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFolderModel)

	if err != nil {
		return err
	}

	*o = FolderModel(varFolderModel)

	return err
}

type NullableFolderModel struct {
	value *FolderModel
	isSet bool
}

func (v NullableFolderModel) Get() *FolderModel {
	return v.value
}

func (v *NullableFolderModel) Set(val *FolderModel) {
	v.value = val
	v.isSet = true
}

func (v NullableFolderModel) IsSet() bool {
	return v.isSet
}

func (v *NullableFolderModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolderModel(val *FolderModel) *NullableFolderModel {
	return &NullableFolderModel{value: val, isSet: true}
}

func (v NullableFolderModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolderModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


