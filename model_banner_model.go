/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BannerModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BannerModel{}

// BannerModel struct for BannerModel
type BannerModel struct {
	Id string `json:"id"`
	Type string `json:"type"`
	Title NullableString `json:"title,omitempty"`
	Content string `json:"content"`
	Dismissible bool `json:"dismissible"`
	Timestamp int32 `json:"timestamp"`
}

type _BannerModel BannerModel

// NewBannerModel instantiates a new BannerModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBannerModel(id string, type_ string, content string, dismissible bool, timestamp int32) *BannerModel {
	this := BannerModel{}
	this.Id = id
	this.Type = type_
	this.Content = content
	this.Dismissible = dismissible
	this.Timestamp = timestamp
	return &this
}

// NewBannerModelWithDefaults instantiates a new BannerModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBannerModelWithDefaults() *BannerModel {
	this := BannerModel{}
	return &this
}

// GetId returns the Id field value
func (o *BannerModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *BannerModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *BannerModel) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *BannerModel) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *BannerModel) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *BannerModel) SetType(v string) {
	o.Type = v
}

// GetTitle returns the Title field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BannerModel) GetTitle() string {
	if o == nil || IsNil(o.Title.Get()) {
		var ret string
		return ret
	}
	return *o.Title.Get()
}

// GetTitleOk returns a tuple with the Title field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BannerModel) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Title.Get(), o.Title.IsSet()
}

// HasTitle returns a boolean if a field has been set.
func (o *BannerModel) HasTitle() bool {
	if o != nil && o.Title.IsSet() {
		return true
	}

	return false
}

// SetTitle gets a reference to the given NullableString and assigns it to the Title field.
func (o *BannerModel) SetTitle(v string) {
	o.Title.Set(&v)
}
// SetTitleNil sets the value for Title to be an explicit nil
func (o *BannerModel) SetTitleNil() {
	o.Title.Set(nil)
}

// UnsetTitle ensures that no value is present for Title, not even an explicit nil
func (o *BannerModel) UnsetTitle() {
	o.Title.Unset()
}

// GetContent returns the Content field value
func (o *BannerModel) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *BannerModel) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *BannerModel) SetContent(v string) {
	o.Content = v
}

// GetDismissible returns the Dismissible field value
func (o *BannerModel) GetDismissible() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Dismissible
}

// GetDismissibleOk returns a tuple with the Dismissible field value
// and a boolean to check if the value has been set.
func (o *BannerModel) GetDismissibleOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Dismissible, true
}

// SetDismissible sets field value
func (o *BannerModel) SetDismissible(v bool) {
	o.Dismissible = v
}

// GetTimestamp returns the Timestamp field value
func (o *BannerModel) GetTimestamp() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timestamp
}

// GetTimestampOk returns a tuple with the Timestamp field value
// and a boolean to check if the value has been set.
func (o *BannerModel) GetTimestampOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timestamp, true
}

// SetTimestamp sets field value
func (o *BannerModel) SetTimestamp(v int32) {
	o.Timestamp = v
}

func (o BannerModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BannerModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["type"] = o.Type
	if o.Title.IsSet() {
		toSerialize["title"] = o.Title.Get()
	}
	toSerialize["content"] = o.Content
	toSerialize["dismissible"] = o.Dismissible
	toSerialize["timestamp"] = o.Timestamp
	return toSerialize, nil
}

func (o *BannerModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"type",
		"content",
		"dismissible",
		"timestamp",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBannerModel := _BannerModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBannerModel)

	if err != nil {
		return err
	}

	*o = BannerModel(varBannerModel)

	return err
}

type NullableBannerModel struct {
	value *BannerModel
	isSet bool
}

func (v NullableBannerModel) Get() *BannerModel {
	return v.value
}

func (v *NullableBannerModel) Set(val *BannerModel) {
	v.value = val
	v.isSet = true
}

func (v NullableBannerModel) IsSet() bool {
	return v.isSet
}

func (v *NullableBannerModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBannerModel(val *BannerModel) *NullableBannerModel {
	return &NullableBannerModel{value: val, isSet: true}
}

func (v NullableBannerModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBannerModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


