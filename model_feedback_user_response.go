/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openwebuiapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FeedbackUserResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeedbackUserResponse{}

// FeedbackUserResponse struct for FeedbackUserResponse
type FeedbackUserResponse struct {
	Id string `json:"id"`
	UserId string `json:"user_id"`
	Version int32 `json:"version"`
	Type string `json:"type"`
	Data map[string]interface{} `json:"data,omitempty"`
	Meta map[string]interface{} `json:"meta,omitempty"`
	CreatedAt int32 `json:"created_at"`
	UpdatedAt int32 `json:"updated_at"`
	User NullableUserModel `json:"user,omitempty"`
}

type _FeedbackUserResponse FeedbackUserResponse

// NewFeedbackUserResponse instantiates a new FeedbackUserResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedbackUserResponse(id string, userId string, version int32, type_ string, createdAt int32, updatedAt int32) *FeedbackUserResponse {
	this := FeedbackUserResponse{}
	this.Id = id
	this.UserId = userId
	this.Version = version
	this.Type = type_
	this.CreatedAt = createdAt
	this.UpdatedAt = updatedAt
	return &this
}

// NewFeedbackUserResponseWithDefaults instantiates a new FeedbackUserResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedbackUserResponseWithDefaults() *FeedbackUserResponse {
	this := FeedbackUserResponse{}
	return &this
}

// GetId returns the Id field value
func (o *FeedbackUserResponse) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *FeedbackUserResponse) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *FeedbackUserResponse) SetId(v string) {
	o.Id = v
}

// GetUserId returns the UserId field value
func (o *FeedbackUserResponse) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *FeedbackUserResponse) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *FeedbackUserResponse) SetUserId(v string) {
	o.UserId = v
}

// GetVersion returns the Version field value
func (o *FeedbackUserResponse) GetVersion() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Version
}

// GetVersionOk returns a tuple with the Version field value
// and a boolean to check if the value has been set.
func (o *FeedbackUserResponse) GetVersionOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Version, true
}

// SetVersion sets field value
func (o *FeedbackUserResponse) SetVersion(v int32) {
	o.Version = v
}

// GetType returns the Type field value
func (o *FeedbackUserResponse) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FeedbackUserResponse) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FeedbackUserResponse) SetType(v string) {
	o.Type = v
}

// GetData returns the Data field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeedbackUserResponse) GetData() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeedbackUserResponse) GetDataOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Data) {
		return map[string]interface{}{}, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *FeedbackUserResponse) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given map[string]interface{} and assigns it to the Data field.
func (o *FeedbackUserResponse) SetData(v map[string]interface{}) {
	o.Data = v
}

// GetMeta returns the Meta field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeedbackUserResponse) GetMeta() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeedbackUserResponse) GetMetaOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Meta) {
		return map[string]interface{}{}, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *FeedbackUserResponse) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given map[string]interface{} and assigns it to the Meta field.
func (o *FeedbackUserResponse) SetMeta(v map[string]interface{}) {
	o.Meta = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *FeedbackUserResponse) GetCreatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *FeedbackUserResponse) GetCreatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *FeedbackUserResponse) SetCreatedAt(v int32) {
	o.CreatedAt = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *FeedbackUserResponse) GetUpdatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *FeedbackUserResponse) GetUpdatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *FeedbackUserResponse) SetUpdatedAt(v int32) {
	o.UpdatedAt = v
}

// GetUser returns the User field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *FeedbackUserResponse) GetUser() UserModel {
	if o == nil || IsNil(o.User.Get()) {
		var ret UserModel
		return ret
	}
	return *o.User.Get()
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *FeedbackUserResponse) GetUserOk() (*UserModel, bool) {
	if o == nil {
		return nil, false
	}
	return o.User.Get(), o.User.IsSet()
}

// HasUser returns a boolean if a field has been set.
func (o *FeedbackUserResponse) HasUser() bool {
	if o != nil && o.User.IsSet() {
		return true
	}

	return false
}

// SetUser gets a reference to the given NullableUserModel and assigns it to the User field.
func (o *FeedbackUserResponse) SetUser(v UserModel) {
	o.User.Set(&v)
}
// SetUserNil sets the value for User to be an explicit nil
func (o *FeedbackUserResponse) SetUserNil() {
	o.User.Set(nil)
}

// UnsetUser ensures that no value is present for User, not even an explicit nil
func (o *FeedbackUserResponse) UnsetUser() {
	o.User.Unset()
}

func (o FeedbackUserResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeedbackUserResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["user_id"] = o.UserId
	toSerialize["version"] = o.Version
	toSerialize["type"] = o.Type
	if o.Data != nil {
		toSerialize["data"] = o.Data
	}
	if o.Meta != nil {
		toSerialize["meta"] = o.Meta
	}
	toSerialize["created_at"] = o.CreatedAt
	toSerialize["updated_at"] = o.UpdatedAt
	if o.User.IsSet() {
		toSerialize["user"] = o.User.Get()
	}
	return toSerialize, nil
}

func (o *FeedbackUserResponse) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"user_id",
		"version",
		"type",
		"created_at",
		"updated_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeedbackUserResponse := _FeedbackUserResponse{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFeedbackUserResponse)

	if err != nil {
		return err
	}

	*o = FeedbackUserResponse(varFeedbackUserResponse)

	return err
}

type NullableFeedbackUserResponse struct {
	value *FeedbackUserResponse
	isSet bool
}

func (v NullableFeedbackUserResponse) Get() *FeedbackUserResponse {
	return v.value
}

func (v *NullableFeedbackUserResponse) Set(val *FeedbackUserResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedbackUserResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedbackUserResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedbackUserResponse(val *FeedbackUserResponse) *NullableFeedbackUserResponse {
	return &NullableFeedbackUserResponse{value: val, isSet: true}
}

func (v NullableFeedbackUserResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedbackUserResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


