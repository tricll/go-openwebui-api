/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SnapshotData type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SnapshotData{}

// SnapshotData struct for SnapshotData
type SnapshotData struct {
	Chat *Chat `json:"chat,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _SnapshotData SnapshotData

// NewSnapshotData instantiates a new SnapshotData object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSnapshotData() *SnapshotData {
	this := SnapshotData{}
	return &this
}

// NewSnapshotDataWithDefaults instantiates a new SnapshotData object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSnapshotDataWithDefaults() *SnapshotData {
	this := SnapshotData{}
	return &this
}

// GetChat returns the Chat field value if set, zero value otherwise.
func (o *SnapshotData) GetChat() Chat {
	if o == nil || IsNil(o.Chat) {
		var ret Chat
		return ret
	}
	return *o.Chat
}

// GetChatOk returns a tuple with the Chat field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SnapshotData) GetChatOk() (*Chat, bool) {
	if o == nil || IsNil(o.Chat) {
		return nil, false
	}
	return o.Chat, true
}

// HasChat returns a boolean if a field has been set.
func (o *SnapshotData) HasChat() bool {
	if o != nil && !IsNil(o.Chat) {
		return true
	}

	return false
}

// SetChat gets a reference to the given Chat and assigns it to the Chat field.
func (o *SnapshotData) SetChat(v Chat) {
	o.Chat = &v
}

func (o SnapshotData) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SnapshotData) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Chat) {
		toSerialize["chat"] = o.Chat
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *SnapshotData) UnmarshalJSON(data []byte) (err error) {
	varSnapshotData := _SnapshotData{}

	err = json.Unmarshal(data, &varSnapshotData)

	if err != nil {
		return err
	}

	*o = SnapshotData(varSnapshotData)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "chat")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableSnapshotData struct {
	value *SnapshotData
	isSet bool
}

func (v NullableSnapshotData) Get() *SnapshotData {
	return v.value
}

func (v *NullableSnapshotData) Set(val *SnapshotData) {
	v.value = val
	v.isSet = true
}

func (v NullableSnapshotData) IsSet() bool {
	return v.isSet
}

func (v *NullableSnapshotData) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSnapshotData(val *SnapshotData) *NullableSnapshotData {
	return &NullableSnapshotData{value: val, isSet: true}
}

func (v NullableSnapshotData) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSnapshotData) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


