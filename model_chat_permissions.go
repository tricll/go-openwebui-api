/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChatPermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChatPermissions{}

// ChatPermissions struct for ChatPermissions
type ChatPermissions struct {
	FileUpload bool `json:"file_upload"`
	Delete bool `json:"delete"`
	Edit bool `json:"edit"`
	Temporary bool `json:"temporary"`
}

type _ChatPermissions ChatPermissions

// NewChatPermissions instantiates a new ChatPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChatPermissions(fileUpload bool, delete bool, edit bool, temporary bool) *ChatPermissions {
	this := ChatPermissions{}
	this.FileUpload = fileUpload
	this.Delete = delete
	this.Edit = edit
	this.Temporary = temporary
	return &this
}

// NewChatPermissionsWithDefaults instantiates a new ChatPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChatPermissionsWithDefaults() *ChatPermissions {
	this := ChatPermissions{}
	return &this
}

// GetFileUpload returns the FileUpload field value
func (o *ChatPermissions) GetFileUpload() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.FileUpload
}

// GetFileUploadOk returns a tuple with the FileUpload field value
// and a boolean to check if the value has been set.
func (o *ChatPermissions) GetFileUploadOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.FileUpload, true
}

// SetFileUpload sets field value
func (o *ChatPermissions) SetFileUpload(v bool) {
	o.FileUpload = v
}

// GetDelete returns the Delete field value
func (o *ChatPermissions) GetDelete() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Delete
}

// GetDeleteOk returns a tuple with the Delete field value
// and a boolean to check if the value has been set.
func (o *ChatPermissions) GetDeleteOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Delete, true
}

// SetDelete sets field value
func (o *ChatPermissions) SetDelete(v bool) {
	o.Delete = v
}

// GetEdit returns the Edit field value
func (o *ChatPermissions) GetEdit() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Edit
}

// GetEditOk returns a tuple with the Edit field value
// and a boolean to check if the value has been set.
func (o *ChatPermissions) GetEditOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Edit, true
}

// SetEdit sets field value
func (o *ChatPermissions) SetEdit(v bool) {
	o.Edit = v
}

// GetTemporary returns the Temporary field value
func (o *ChatPermissions) GetTemporary() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.Temporary
}

// GetTemporaryOk returns a tuple with the Temporary field value
// and a boolean to check if the value has been set.
func (o *ChatPermissions) GetTemporaryOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Temporary, true
}

// SetTemporary sets field value
func (o *ChatPermissions) SetTemporary(v bool) {
	o.Temporary = v
}

func (o ChatPermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChatPermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["file_upload"] = o.FileUpload
	toSerialize["delete"] = o.Delete
	toSerialize["edit"] = o.Edit
	toSerialize["temporary"] = o.Temporary
	return toSerialize, nil
}

func (o *ChatPermissions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"file_upload",
		"delete",
		"edit",
		"temporary",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChatPermissions := _ChatPermissions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChatPermissions)

	if err != nil {
		return err
	}

	*o = ChatPermissions(varChatPermissions)

	return err
}

type NullableChatPermissions struct {
	value *ChatPermissions
	isSet bool
}

func (v NullableChatPermissions) Get() *ChatPermissions {
	return v.value
}

func (v *NullableChatPermissions) Set(val *ChatPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableChatPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableChatPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChatPermissions(val *ChatPermissions) *NullableChatPermissions {
	return &NullableChatPermissions{value: val, isSet: true}
}

func (v NullableChatPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChatPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


