/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ToolMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolMeta{}

// ToolMeta struct for ToolMeta
type ToolMeta struct {
	Description NullableString `json:"description,omitempty"`
	Manifest map[string]interface{} `json:"manifest,omitempty"`
}

// NewToolMeta instantiates a new ToolMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolMeta() *ToolMeta {
	this := ToolMeta{}
	return &this
}

// NewToolMetaWithDefaults instantiates a new ToolMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolMetaWithDefaults() *ToolMeta {
	this := ToolMeta{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ToolMeta) GetDescription() string {
	if o == nil || IsNil(o.Description.Get()) {
		var ret string
		return ret
	}
	return *o.Description.Get()
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ToolMeta) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Description.Get(), o.Description.IsSet()
}

// HasDescription returns a boolean if a field has been set.
func (o *ToolMeta) HasDescription() bool {
	if o != nil && o.Description.IsSet() {
		return true
	}

	return false
}

// SetDescription gets a reference to the given NullableString and assigns it to the Description field.
func (o *ToolMeta) SetDescription(v string) {
	o.Description.Set(&v)
}
// SetDescriptionNil sets the value for Description to be an explicit nil
func (o *ToolMeta) SetDescriptionNil() {
	o.Description.Set(nil)
}

// UnsetDescription ensures that no value is present for Description, not even an explicit nil
func (o *ToolMeta) UnsetDescription() {
	o.Description.Unset()
}

// GetManifest returns the Manifest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ToolMeta) GetManifest() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.Manifest
}

// GetManifestOk returns a tuple with the Manifest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ToolMeta) GetManifestOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Manifest) {
		return map[string]interface{}{}, false
	}
	return o.Manifest, true
}

// HasManifest returns a boolean if a field has been set.
func (o *ToolMeta) HasManifest() bool {
	if o != nil && !IsNil(o.Manifest) {
		return true
	}

	return false
}

// SetManifest gets a reference to the given map[string]interface{} and assigns it to the Manifest field.
func (o *ToolMeta) SetManifest(v map[string]interface{}) {
	o.Manifest = v
}

func (o ToolMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Description.IsSet() {
		toSerialize["description"] = o.Description.Get()
	}
	if o.Manifest != nil {
		toSerialize["manifest"] = o.Manifest
	}
	return toSerialize, nil
}

type NullableToolMeta struct {
	value *ToolMeta
	isSet bool
}

func (v NullableToolMeta) Get() *ToolMeta {
	return v.value
}

func (v *NullableToolMeta) Set(val *ToolMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableToolMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableToolMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolMeta(val *ToolMeta) *NullableToolMeta {
	return &NullableToolMeta{value: val, isSet: true}
}

func (v NullableToolMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


