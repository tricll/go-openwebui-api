/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the FeedbackForm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FeedbackForm{}

// FeedbackForm struct for FeedbackForm
type FeedbackForm struct {
	Type string `json:"type"`
	Data *FeedbackFormData `json:"data,omitempty"`
	Meta *Meta `json:"meta,omitempty"`
	Snapshot *FeedbackFormSnapshot `json:"snapshot,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _FeedbackForm FeedbackForm

// NewFeedbackForm instantiates a new FeedbackForm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFeedbackForm(type_ string) *FeedbackForm {
	this := FeedbackForm{}
	this.Type = type_
	return &this
}

// NewFeedbackFormWithDefaults instantiates a new FeedbackForm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFeedbackFormWithDefaults() *FeedbackForm {
	this := FeedbackForm{}
	return &this
}

// GetType returns the Type field value
func (o *FeedbackForm) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *FeedbackForm) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *FeedbackForm) SetType(v string) {
	o.Type = v
}

// GetData returns the Data field value if set, zero value otherwise.
func (o *FeedbackForm) GetData() FeedbackFormData {
	if o == nil || IsNil(o.Data) {
		var ret FeedbackFormData
		return ret
	}
	return *o.Data
}

// GetDataOk returns a tuple with the Data field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackForm) GetDataOk() (*FeedbackFormData, bool) {
	if o == nil || IsNil(o.Data) {
		return nil, false
	}
	return o.Data, true
}

// HasData returns a boolean if a field has been set.
func (o *FeedbackForm) HasData() bool {
	if o != nil && !IsNil(o.Data) {
		return true
	}

	return false
}

// SetData gets a reference to the given FeedbackFormData and assigns it to the Data field.
func (o *FeedbackForm) SetData(v FeedbackFormData) {
	o.Data = &v
}

// GetMeta returns the Meta field value if set, zero value otherwise.
func (o *FeedbackForm) GetMeta() Meta {
	if o == nil || IsNil(o.Meta) {
		var ret Meta
		return ret
	}
	return *o.Meta
}

// GetMetaOk returns a tuple with the Meta field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackForm) GetMetaOk() (*Meta, bool) {
	if o == nil || IsNil(o.Meta) {
		return nil, false
	}
	return o.Meta, true
}

// HasMeta returns a boolean if a field has been set.
func (o *FeedbackForm) HasMeta() bool {
	if o != nil && !IsNil(o.Meta) {
		return true
	}

	return false
}

// SetMeta gets a reference to the given Meta and assigns it to the Meta field.
func (o *FeedbackForm) SetMeta(v Meta) {
	o.Meta = &v
}

// GetSnapshot returns the Snapshot field value if set, zero value otherwise.
func (o *FeedbackForm) GetSnapshot() FeedbackFormSnapshot {
	if o == nil || IsNil(o.Snapshot) {
		var ret FeedbackFormSnapshot
		return ret
	}
	return *o.Snapshot
}

// GetSnapshotOk returns a tuple with the Snapshot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FeedbackForm) GetSnapshotOk() (*FeedbackFormSnapshot, bool) {
	if o == nil || IsNil(o.Snapshot) {
		return nil, false
	}
	return o.Snapshot, true
}

// HasSnapshot returns a boolean if a field has been set.
func (o *FeedbackForm) HasSnapshot() bool {
	if o != nil && !IsNil(o.Snapshot) {
		return true
	}

	return false
}

// SetSnapshot gets a reference to the given FeedbackFormSnapshot and assigns it to the Snapshot field.
func (o *FeedbackForm) SetSnapshot(v FeedbackFormSnapshot) {
	o.Snapshot = &v
}

func (o FeedbackForm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FeedbackForm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.Data) {
		toSerialize["data"] = o.Data
	}
	if !IsNil(o.Meta) {
		toSerialize["meta"] = o.Meta
	}
	if !IsNil(o.Snapshot) {
		toSerialize["snapshot"] = o.Snapshot
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *FeedbackForm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFeedbackForm := _FeedbackForm{}

	err = json.Unmarshal(data, &varFeedbackForm)

	if err != nil {
		return err
	}

	*o = FeedbackForm(varFeedbackForm)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "data")
		delete(additionalProperties, "meta")
		delete(additionalProperties, "snapshot")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableFeedbackForm struct {
	value *FeedbackForm
	isSet bool
}

func (v NullableFeedbackForm) Get() *FeedbackForm {
	return v.value
}

func (v *NullableFeedbackForm) Set(val *FeedbackForm) {
	v.value = val
	v.isSet = true
}

func (v NullableFeedbackForm) IsSet() bool {
	return v.isSet
}

func (v *NullableFeedbackForm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFeedbackForm(val *FeedbackForm) *NullableFeedbackForm {
	return &NullableFeedbackForm{value: val, isSet: true}
}

func (v NullableFeedbackForm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFeedbackForm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


