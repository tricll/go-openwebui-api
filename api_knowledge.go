/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// KnowledgeAPIService KnowledgeAPI service
type KnowledgeAPIService service

type ApiAddFileToKnowledgeByIdKnowledgeIdFileAddPostRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
	id string
	knowledgeFileIdForm *KnowledgeFileIdForm
}

func (r ApiAddFileToKnowledgeByIdKnowledgeIdFileAddPostRequest) KnowledgeFileIdForm(knowledgeFileIdForm KnowledgeFileIdForm) ApiAddFileToKnowledgeByIdKnowledgeIdFileAddPostRequest {
	r.knowledgeFileIdForm = &knowledgeFileIdForm
	return r
}

func (r ApiAddFileToKnowledgeByIdKnowledgeIdFileAddPostRequest) Execute() (*KnowledgeFilesResponse, *http.Response, error) {
	return r.ApiService.AddFileToKnowledgeByIdKnowledgeIdFileAddPostExecute(r)
}

/*
AddFileToKnowledgeByIdKnowledgeIdFileAddPost Add File To Knowledge By Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiAddFileToKnowledgeByIdKnowledgeIdFileAddPostRequest
*/
func (a *KnowledgeAPIService) AddFileToKnowledgeByIdKnowledgeIdFileAddPost(ctx context.Context, id string) ApiAddFileToKnowledgeByIdKnowledgeIdFileAddPostRequest {
	return ApiAddFileToKnowledgeByIdKnowledgeIdFileAddPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeFilesResponse
func (a *KnowledgeAPIService) AddFileToKnowledgeByIdKnowledgeIdFileAddPostExecute(r ApiAddFileToKnowledgeByIdKnowledgeIdFileAddPostRequest) (*KnowledgeFilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeFilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.AddFileToKnowledgeByIdKnowledgeIdFileAddPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/knowledge/{id}/file/add"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.knowledgeFileIdForm == nil {
		return localVarReturnValue, nil, reportError("knowledgeFileIdForm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.knowledgeFileIdForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiCreateNewKnowledgeKnowledgeCreatePostRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
	knowledgeForm *KnowledgeForm
}

func (r ApiCreateNewKnowledgeKnowledgeCreatePostRequest) KnowledgeForm(knowledgeForm KnowledgeForm) ApiCreateNewKnowledgeKnowledgeCreatePostRequest {
	r.knowledgeForm = &knowledgeForm
	return r
}

func (r ApiCreateNewKnowledgeKnowledgeCreatePostRequest) Execute() (*KnowledgeResponse, *http.Response, error) {
	return r.ApiService.CreateNewKnowledgeKnowledgeCreatePostExecute(r)
}

/*
CreateNewKnowledgeKnowledgeCreatePost Create New Knowledge

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiCreateNewKnowledgeKnowledgeCreatePostRequest
*/
func (a *KnowledgeAPIService) CreateNewKnowledgeKnowledgeCreatePost(ctx context.Context) ApiCreateNewKnowledgeKnowledgeCreatePostRequest {
	return ApiCreateNewKnowledgeKnowledgeCreatePostRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return KnowledgeResponse
func (a *KnowledgeAPIService) CreateNewKnowledgeKnowledgeCreatePostExecute(r ApiCreateNewKnowledgeKnowledgeCreatePostRequest) (*KnowledgeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.CreateNewKnowledgeKnowledgeCreatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/knowledge/create"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.knowledgeForm == nil {
		return localVarReturnValue, nil, reportError("knowledgeForm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.knowledgeForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteKnowledgeByIdKnowledgeIdDeleteDeleteRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
	id string
}

func (r ApiDeleteKnowledgeByIdKnowledgeIdDeleteDeleteRequest) Execute() (bool, *http.Response, error) {
	return r.ApiService.DeleteKnowledgeByIdKnowledgeIdDeleteDeleteExecute(r)
}

/*
DeleteKnowledgeByIdKnowledgeIdDeleteDelete Delete Knowledge By Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiDeleteKnowledgeByIdKnowledgeIdDeleteDeleteRequest
*/
func (a *KnowledgeAPIService) DeleteKnowledgeByIdKnowledgeIdDeleteDelete(ctx context.Context, id string) ApiDeleteKnowledgeByIdKnowledgeIdDeleteDeleteRequest {
	return ApiDeleteKnowledgeByIdKnowledgeIdDeleteDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return bool
func (a *KnowledgeAPIService) DeleteKnowledgeByIdKnowledgeIdDeleteDeleteExecute(r ApiDeleteKnowledgeByIdKnowledgeIdDeleteDeleteRequest) (bool, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  bool
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.DeleteKnowledgeByIdKnowledgeIdDeleteDelete")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/knowledge/{id}/delete"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetKnowledgeByIdKnowledgeIdGetRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
	id string
}

func (r ApiGetKnowledgeByIdKnowledgeIdGetRequest) Execute() (*KnowledgeFilesResponse, *http.Response, error) {
	return r.ApiService.GetKnowledgeByIdKnowledgeIdGetExecute(r)
}

/*
GetKnowledgeByIdKnowledgeIdGet Get Knowledge By Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiGetKnowledgeByIdKnowledgeIdGetRequest
*/
func (a *KnowledgeAPIService) GetKnowledgeByIdKnowledgeIdGet(ctx context.Context, id string) ApiGetKnowledgeByIdKnowledgeIdGetRequest {
	return ApiGetKnowledgeByIdKnowledgeIdGetRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeFilesResponse
func (a *KnowledgeAPIService) GetKnowledgeByIdKnowledgeIdGetExecute(r ApiGetKnowledgeByIdKnowledgeIdGetRequest) (*KnowledgeFilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeFilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.GetKnowledgeByIdKnowledgeIdGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/knowledge/{id}"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetKnowledgeKnowledgeGetRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
}

func (r ApiGetKnowledgeKnowledgeGetRequest) Execute() ([]KnowledgeUserResponse, *http.Response, error) {
	return r.ApiService.GetKnowledgeKnowledgeGetExecute(r)
}

/*
GetKnowledgeKnowledgeGet Get Knowledge

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetKnowledgeKnowledgeGetRequest
*/
func (a *KnowledgeAPIService) GetKnowledgeKnowledgeGet(ctx context.Context) ApiGetKnowledgeKnowledgeGetRequest {
	return ApiGetKnowledgeKnowledgeGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KnowledgeUserResponse
func (a *KnowledgeAPIService) GetKnowledgeKnowledgeGetExecute(r ApiGetKnowledgeKnowledgeGetRequest) ([]KnowledgeUserResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KnowledgeUserResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.GetKnowledgeKnowledgeGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/knowledge/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetKnowledgeListKnowledgeListGetRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
}

func (r ApiGetKnowledgeListKnowledgeListGetRequest) Execute() ([]KnowledgeUserResponse, *http.Response, error) {
	return r.ApiService.GetKnowledgeListKnowledgeListGetExecute(r)
}

/*
GetKnowledgeListKnowledgeListGet Get Knowledge List

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @return ApiGetKnowledgeListKnowledgeListGetRequest
*/
func (a *KnowledgeAPIService) GetKnowledgeListKnowledgeListGet(ctx context.Context) ApiGetKnowledgeListKnowledgeListGetRequest {
	return ApiGetKnowledgeListKnowledgeListGetRequest{
		ApiService: a,
		ctx: ctx,
	}
}

// Execute executes the request
//  @return []KnowledgeUserResponse
func (a *KnowledgeAPIService) GetKnowledgeListKnowledgeListGetExecute(r ApiGetKnowledgeListKnowledgeListGetRequest) ([]KnowledgeUserResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  []KnowledgeUserResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.GetKnowledgeListKnowledgeListGet")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/knowledge/list"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiRemoveFileFromKnowledgeByIdKnowledgeIdFileRemovePostRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
	id string
	knowledgeFileIdForm *KnowledgeFileIdForm
}

func (r ApiRemoveFileFromKnowledgeByIdKnowledgeIdFileRemovePostRequest) KnowledgeFileIdForm(knowledgeFileIdForm KnowledgeFileIdForm) ApiRemoveFileFromKnowledgeByIdKnowledgeIdFileRemovePostRequest {
	r.knowledgeFileIdForm = &knowledgeFileIdForm
	return r
}

func (r ApiRemoveFileFromKnowledgeByIdKnowledgeIdFileRemovePostRequest) Execute() (*KnowledgeFilesResponse, *http.Response, error) {
	return r.ApiService.RemoveFileFromKnowledgeByIdKnowledgeIdFileRemovePostExecute(r)
}

/*
RemoveFileFromKnowledgeByIdKnowledgeIdFileRemovePost Remove File From Knowledge By Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiRemoveFileFromKnowledgeByIdKnowledgeIdFileRemovePostRequest
*/
func (a *KnowledgeAPIService) RemoveFileFromKnowledgeByIdKnowledgeIdFileRemovePost(ctx context.Context, id string) ApiRemoveFileFromKnowledgeByIdKnowledgeIdFileRemovePostRequest {
	return ApiRemoveFileFromKnowledgeByIdKnowledgeIdFileRemovePostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeFilesResponse
func (a *KnowledgeAPIService) RemoveFileFromKnowledgeByIdKnowledgeIdFileRemovePostExecute(r ApiRemoveFileFromKnowledgeByIdKnowledgeIdFileRemovePostRequest) (*KnowledgeFilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeFilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.RemoveFileFromKnowledgeByIdKnowledgeIdFileRemovePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/knowledge/{id}/file/remove"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.knowledgeFileIdForm == nil {
		return localVarReturnValue, nil, reportError("knowledgeFileIdForm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.knowledgeFileIdForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiResetKnowledgeByIdKnowledgeIdResetPostRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
	id string
}

func (r ApiResetKnowledgeByIdKnowledgeIdResetPostRequest) Execute() (*KnowledgeResponse, *http.Response, error) {
	return r.ApiService.ResetKnowledgeByIdKnowledgeIdResetPostExecute(r)
}

/*
ResetKnowledgeByIdKnowledgeIdResetPost Reset Knowledge By Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiResetKnowledgeByIdKnowledgeIdResetPostRequest
*/
func (a *KnowledgeAPIService) ResetKnowledgeByIdKnowledgeIdResetPost(ctx context.Context, id string) ApiResetKnowledgeByIdKnowledgeIdResetPostRequest {
	return ApiResetKnowledgeByIdKnowledgeIdResetPostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeResponse
func (a *KnowledgeAPIService) ResetKnowledgeByIdKnowledgeIdResetPostExecute(r ApiResetKnowledgeByIdKnowledgeIdResetPostRequest) (*KnowledgeResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.ResetKnowledgeByIdKnowledgeIdResetPost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/knowledge/{id}/reset"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateFileFromKnowledgeByIdKnowledgeIdFileUpdatePostRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
	id string
	knowledgeFileIdForm *KnowledgeFileIdForm
}

func (r ApiUpdateFileFromKnowledgeByIdKnowledgeIdFileUpdatePostRequest) KnowledgeFileIdForm(knowledgeFileIdForm KnowledgeFileIdForm) ApiUpdateFileFromKnowledgeByIdKnowledgeIdFileUpdatePostRequest {
	r.knowledgeFileIdForm = &knowledgeFileIdForm
	return r
}

func (r ApiUpdateFileFromKnowledgeByIdKnowledgeIdFileUpdatePostRequest) Execute() (*KnowledgeFilesResponse, *http.Response, error) {
	return r.ApiService.UpdateFileFromKnowledgeByIdKnowledgeIdFileUpdatePostExecute(r)
}

/*
UpdateFileFromKnowledgeByIdKnowledgeIdFileUpdatePost Update File From Knowledge By Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiUpdateFileFromKnowledgeByIdKnowledgeIdFileUpdatePostRequest
*/
func (a *KnowledgeAPIService) UpdateFileFromKnowledgeByIdKnowledgeIdFileUpdatePost(ctx context.Context, id string) ApiUpdateFileFromKnowledgeByIdKnowledgeIdFileUpdatePostRequest {
	return ApiUpdateFileFromKnowledgeByIdKnowledgeIdFileUpdatePostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeFilesResponse
func (a *KnowledgeAPIService) UpdateFileFromKnowledgeByIdKnowledgeIdFileUpdatePostExecute(r ApiUpdateFileFromKnowledgeByIdKnowledgeIdFileUpdatePostRequest) (*KnowledgeFilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeFilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.UpdateFileFromKnowledgeByIdKnowledgeIdFileUpdatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/knowledge/{id}/file/update"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.knowledgeFileIdForm == nil {
		return localVarReturnValue, nil, reportError("knowledgeFileIdForm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.knowledgeFileIdForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateKnowledgeByIdKnowledgeIdUpdatePostRequest struct {
	ctx context.Context
	ApiService *KnowledgeAPIService
	id string
	knowledgeForm *KnowledgeForm
}

func (r ApiUpdateKnowledgeByIdKnowledgeIdUpdatePostRequest) KnowledgeForm(knowledgeForm KnowledgeForm) ApiUpdateKnowledgeByIdKnowledgeIdUpdatePostRequest {
	r.knowledgeForm = &knowledgeForm
	return r
}

func (r ApiUpdateKnowledgeByIdKnowledgeIdUpdatePostRequest) Execute() (*KnowledgeFilesResponse, *http.Response, error) {
	return r.ApiService.UpdateKnowledgeByIdKnowledgeIdUpdatePostExecute(r)
}

/*
UpdateKnowledgeByIdKnowledgeIdUpdatePost Update Knowledge By Id

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id
 @return ApiUpdateKnowledgeByIdKnowledgeIdUpdatePostRequest
*/
func (a *KnowledgeAPIService) UpdateKnowledgeByIdKnowledgeIdUpdatePost(ctx context.Context, id string) ApiUpdateKnowledgeByIdKnowledgeIdUpdatePostRequest {
	return ApiUpdateKnowledgeByIdKnowledgeIdUpdatePostRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return KnowledgeFilesResponse
func (a *KnowledgeAPIService) UpdateKnowledgeByIdKnowledgeIdUpdatePostExecute(r ApiUpdateKnowledgeByIdKnowledgeIdUpdatePostRequest) (*KnowledgeFilesResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *KnowledgeFilesResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "KnowledgeAPIService.UpdateKnowledgeByIdKnowledgeIdUpdatePost")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/knowledge/{id}/update"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.knowledgeForm == nil {
		return localVarReturnValue, nil, reportError("knowledgeForm is required and must be specified")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.knowledgeForm
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 422 {
			var v HTTPValidationError
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
