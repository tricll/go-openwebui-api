/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ToolForm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ToolForm{}

// ToolForm struct for ToolForm
type ToolForm struct {
	Id string `json:"id"`
	Name string `json:"name"`
	Content string `json:"content"`
	Meta ToolMeta `json:"meta"`
	AccessControl map[string]interface{} `json:"access_control,omitempty"`
}

type _ToolForm ToolForm

// NewToolForm instantiates a new ToolForm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewToolForm(id string, name string, content string, meta ToolMeta) *ToolForm {
	this := ToolForm{}
	this.Id = id
	this.Name = name
	this.Content = content
	this.Meta = meta
	return &this
}

// NewToolFormWithDefaults instantiates a new ToolForm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewToolFormWithDefaults() *ToolForm {
	this := ToolForm{}
	return &this
}

// GetId returns the Id field value
func (o *ToolForm) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ToolForm) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ToolForm) SetId(v string) {
	o.Id = v
}

// GetName returns the Name field value
func (o *ToolForm) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ToolForm) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ToolForm) SetName(v string) {
	o.Name = v
}

// GetContent returns the Content field value
func (o *ToolForm) GetContent() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Content
}

// GetContentOk returns a tuple with the Content field value
// and a boolean to check if the value has been set.
func (o *ToolForm) GetContentOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Content, true
}

// SetContent sets field value
func (o *ToolForm) SetContent(v string) {
	o.Content = v
}

// GetMeta returns the Meta field value
func (o *ToolForm) GetMeta() ToolMeta {
	if o == nil {
		var ret ToolMeta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *ToolForm) GetMetaOk() (*ToolMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *ToolForm) SetMeta(v ToolMeta) {
	o.Meta = v
}

// GetAccessControl returns the AccessControl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ToolForm) GetAccessControl() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AccessControl
}

// GetAccessControlOk returns a tuple with the AccessControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ToolForm) GetAccessControlOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AccessControl) {
		return map[string]interface{}{}, false
	}
	return o.AccessControl, true
}

// HasAccessControl returns a boolean if a field has been set.
func (o *ToolForm) HasAccessControl() bool {
	if o != nil && !IsNil(o.AccessControl) {
		return true
	}

	return false
}

// SetAccessControl gets a reference to the given map[string]interface{} and assigns it to the AccessControl field.
func (o *ToolForm) SetAccessControl(v map[string]interface{}) {
	o.AccessControl = v
}

func (o ToolForm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ToolForm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["name"] = o.Name
	toSerialize["content"] = o.Content
	toSerialize["meta"] = o.Meta
	if o.AccessControl != nil {
		toSerialize["access_control"] = o.AccessControl
	}
	return toSerialize, nil
}

func (o *ToolForm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"content",
		"meta",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varToolForm := _ToolForm{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varToolForm)

	if err != nil {
		return err
	}

	*o = ToolForm(varToolForm)

	return err
}

type NullableToolForm struct {
	value *ToolForm
	isSet bool
}

func (v NullableToolForm) Get() *ToolForm {
	return v.value
}

func (v *NullableToolForm) Set(val *ToolForm) {
	v.value = val
	v.isSet = true
}

func (v NullableToolForm) IsSet() bool {
	return v.isSet
}

func (v *NullableToolForm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableToolForm(val *ToolForm) *NullableToolForm {
	return &NullableToolForm{value: val, isSet: true}
}

func (v NullableToolForm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableToolForm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


