/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openwebuiapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModelForm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelForm{}

// ModelForm struct for ModelForm
type ModelForm struct {
	Id string `json:"id"`
	BaseModelId NullableString `json:"base_model_id,omitempty"`
	Name string `json:"name"`
	Meta ModelMeta `json:"meta"`
	Params map[string]interface{} `json:"params"`
	AccessControl map[string]interface{} `json:"access_control,omitempty"`
	IsActive *bool `json:"is_active,omitempty"`
}

type _ModelForm ModelForm

// NewModelForm instantiates a new ModelForm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelForm(id string, name string, meta ModelMeta, params map[string]interface{}) *ModelForm {
	this := ModelForm{}
	this.Id = id
	this.Name = name
	this.Meta = meta
	this.Params = params
	var isActive bool = true
	this.IsActive = &isActive
	return &this
}

// NewModelFormWithDefaults instantiates a new ModelForm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelFormWithDefaults() *ModelForm {
	this := ModelForm{}
	var isActive bool = true
	this.IsActive = &isActive
	return &this
}

// GetId returns the Id field value
func (o *ModelForm) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ModelForm) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ModelForm) SetId(v string) {
	o.Id = v
}

// GetBaseModelId returns the BaseModelId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelForm) GetBaseModelId() string {
	if o == nil || IsNil(o.BaseModelId.Get()) {
		var ret string
		return ret
	}
	return *o.BaseModelId.Get()
}

// GetBaseModelIdOk returns a tuple with the BaseModelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelForm) GetBaseModelIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BaseModelId.Get(), o.BaseModelId.IsSet()
}

// HasBaseModelId returns a boolean if a field has been set.
func (o *ModelForm) HasBaseModelId() bool {
	if o != nil && o.BaseModelId.IsSet() {
		return true
	}

	return false
}

// SetBaseModelId gets a reference to the given NullableString and assigns it to the BaseModelId field.
func (o *ModelForm) SetBaseModelId(v string) {
	o.BaseModelId.Set(&v)
}
// SetBaseModelIdNil sets the value for BaseModelId to be an explicit nil
func (o *ModelForm) SetBaseModelIdNil() {
	o.BaseModelId.Set(nil)
}

// UnsetBaseModelId ensures that no value is present for BaseModelId, not even an explicit nil
func (o *ModelForm) UnsetBaseModelId() {
	o.BaseModelId.Unset()
}

// GetName returns the Name field value
func (o *ModelForm) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ModelForm) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ModelForm) SetName(v string) {
	o.Name = v
}

// GetMeta returns the Meta field value
func (o *ModelForm) GetMeta() ModelMeta {
	if o == nil {
		var ret ModelMeta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *ModelForm) GetMetaOk() (*ModelMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *ModelForm) SetMeta(v ModelMeta) {
	o.Meta = v
}

// GetParams returns the Params field value
func (o *ModelForm) GetParams() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *ModelForm) GetParamsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Params, true
}

// SetParams sets field value
func (o *ModelForm) SetParams(v map[string]interface{}) {
	o.Params = v
}

// GetAccessControl returns the AccessControl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelForm) GetAccessControl() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AccessControl
}

// GetAccessControlOk returns a tuple with the AccessControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelForm) GetAccessControlOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AccessControl) {
		return map[string]interface{}{}, false
	}
	return o.AccessControl, true
}

// HasAccessControl returns a boolean if a field has been set.
func (o *ModelForm) HasAccessControl() bool {
	if o != nil && !IsNil(o.AccessControl) {
		return true
	}

	return false
}

// SetAccessControl gets a reference to the given map[string]interface{} and assigns it to the AccessControl field.
func (o *ModelForm) SetAccessControl(v map[string]interface{}) {
	o.AccessControl = v
}

// GetIsActive returns the IsActive field value if set, zero value otherwise.
func (o *ModelForm) GetIsActive() bool {
	if o == nil || IsNil(o.IsActive) {
		var ret bool
		return ret
	}
	return *o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelForm) GetIsActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.IsActive) {
		return nil, false
	}
	return o.IsActive, true
}

// HasIsActive returns a boolean if a field has been set.
func (o *ModelForm) HasIsActive() bool {
	if o != nil && !IsNil(o.IsActive) {
		return true
	}

	return false
}

// SetIsActive gets a reference to the given bool and assigns it to the IsActive field.
func (o *ModelForm) SetIsActive(v bool) {
	o.IsActive = &v
}

func (o ModelForm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelForm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if o.BaseModelId.IsSet() {
		toSerialize["base_model_id"] = o.BaseModelId.Get()
	}
	toSerialize["name"] = o.Name
	toSerialize["meta"] = o.Meta
	toSerialize["params"] = o.Params
	if o.AccessControl != nil {
		toSerialize["access_control"] = o.AccessControl
	}
	if !IsNil(o.IsActive) {
		toSerialize["is_active"] = o.IsActive
	}
	return toSerialize, nil
}

func (o *ModelForm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"name",
		"meta",
		"params",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelForm := _ModelForm{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModelForm)

	if err != nil {
		return err
	}

	*o = ModelForm(varModelForm)

	return err
}

type NullableModelForm struct {
	value *ModelForm
	isSet bool
}

func (v NullableModelForm) Get() *ModelForm {
	return v.value
}

func (v *NullableModelForm) Set(val *ModelForm) {
	v.value = val
	v.isSet = true
}

func (v NullableModelForm) IsSet() bool {
	return v.isSet
}

func (v *NullableModelForm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelForm(val *ModelForm) *NullableModelForm {
	return &NullableModelForm{value: val, isSet: true}
}

func (v NullableModelForm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelForm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


