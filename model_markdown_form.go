/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MarkdownForm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MarkdownForm{}

// MarkdownForm struct for MarkdownForm
type MarkdownForm struct {
	Md string `json:"md"`
}

type _MarkdownForm MarkdownForm

// NewMarkdownForm instantiates a new MarkdownForm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMarkdownForm(md string) *MarkdownForm {
	this := MarkdownForm{}
	this.Md = md
	return &this
}

// NewMarkdownFormWithDefaults instantiates a new MarkdownForm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMarkdownFormWithDefaults() *MarkdownForm {
	this := MarkdownForm{}
	return &this
}

// GetMd returns the Md field value
func (o *MarkdownForm) GetMd() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Md
}

// GetMdOk returns a tuple with the Md field value
// and a boolean to check if the value has been set.
func (o *MarkdownForm) GetMdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Md, true
}

// SetMd sets field value
func (o *MarkdownForm) SetMd(v string) {
	o.Md = v
}

func (o MarkdownForm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MarkdownForm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["md"] = o.Md
	return toSerialize, nil
}

func (o *MarkdownForm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"md",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMarkdownForm := _MarkdownForm{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMarkdownForm)

	if err != nil {
		return err
	}

	*o = MarkdownForm(varMarkdownForm)

	return err
}

type NullableMarkdownForm struct {
	value *MarkdownForm
	isSet bool
}

func (v NullableMarkdownForm) Get() *MarkdownForm {
	return v.value
}

func (v *NullableMarkdownForm) Set(val *MarkdownForm) {
	v.value = val
	v.isSet = true
}

func (v NullableMarkdownForm) IsSet() bool {
	return v.isSet
}

func (v *NullableMarkdownForm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarkdownForm(val *MarkdownForm) *NullableMarkdownForm {
	return &NullableMarkdownForm{value: val, isSet: true}
}

func (v NullableMarkdownForm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarkdownForm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


