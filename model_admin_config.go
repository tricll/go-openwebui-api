/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the AdminConfig type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AdminConfig{}

// AdminConfig struct for AdminConfig
type AdminConfig struct {
	SHOW_ADMIN_DETAILS bool `json:"SHOW_ADMIN_DETAILS"`
	ENABLE_SIGNUP bool `json:"ENABLE_SIGNUP"`
	ENABLE_API_KEY bool `json:"ENABLE_API_KEY"`
	DEFAULT_USER_ROLE string `json:"DEFAULT_USER_ROLE"`
	JWT_EXPIRES_IN string `json:"JWT_EXPIRES_IN"`
	ENABLE_COMMUNITY_SHARING bool `json:"ENABLE_COMMUNITY_SHARING"`
	ENABLE_MESSAGE_RATING bool `json:"ENABLE_MESSAGE_RATING"`
}

type _AdminConfig AdminConfig

// NewAdminConfig instantiates a new AdminConfig object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAdminConfig(sHOWADMINDETAILS bool, eNABLESIGNUP bool, eNABLEAPIKEY bool, dEFAULTUSERROLE string, jWTEXPIRESIN string, eNABLECOMMUNITYSHARING bool, eNABLEMESSAGERATING bool) *AdminConfig {
	this := AdminConfig{}
	this.SHOW_ADMIN_DETAILS = sHOWADMINDETAILS
	this.ENABLE_SIGNUP = eNABLESIGNUP
	this.ENABLE_API_KEY = eNABLEAPIKEY
	this.DEFAULT_USER_ROLE = dEFAULTUSERROLE
	this.JWT_EXPIRES_IN = jWTEXPIRESIN
	this.ENABLE_COMMUNITY_SHARING = eNABLECOMMUNITYSHARING
	this.ENABLE_MESSAGE_RATING = eNABLEMESSAGERATING
	return &this
}

// NewAdminConfigWithDefaults instantiates a new AdminConfig object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAdminConfigWithDefaults() *AdminConfig {
	this := AdminConfig{}
	return &this
}

// GetSHOW_ADMIN_DETAILS returns the SHOW_ADMIN_DETAILS field value
func (o *AdminConfig) GetSHOW_ADMIN_DETAILS() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.SHOW_ADMIN_DETAILS
}

// GetSHOW_ADMIN_DETAILSOk returns a tuple with the SHOW_ADMIN_DETAILS field value
// and a boolean to check if the value has been set.
func (o *AdminConfig) GetSHOW_ADMIN_DETAILSOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.SHOW_ADMIN_DETAILS, true
}

// SetSHOW_ADMIN_DETAILS sets field value
func (o *AdminConfig) SetSHOW_ADMIN_DETAILS(v bool) {
	o.SHOW_ADMIN_DETAILS = v
}

// GetENABLE_SIGNUP returns the ENABLE_SIGNUP field value
func (o *AdminConfig) GetENABLE_SIGNUP() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ENABLE_SIGNUP
}

// GetENABLE_SIGNUPOk returns a tuple with the ENABLE_SIGNUP field value
// and a boolean to check if the value has been set.
func (o *AdminConfig) GetENABLE_SIGNUPOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ENABLE_SIGNUP, true
}

// SetENABLE_SIGNUP sets field value
func (o *AdminConfig) SetENABLE_SIGNUP(v bool) {
	o.ENABLE_SIGNUP = v
}

// GetENABLE_API_KEY returns the ENABLE_API_KEY field value
func (o *AdminConfig) GetENABLE_API_KEY() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ENABLE_API_KEY
}

// GetENABLE_API_KEYOk returns a tuple with the ENABLE_API_KEY field value
// and a boolean to check if the value has been set.
func (o *AdminConfig) GetENABLE_API_KEYOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ENABLE_API_KEY, true
}

// SetENABLE_API_KEY sets field value
func (o *AdminConfig) SetENABLE_API_KEY(v bool) {
	o.ENABLE_API_KEY = v
}

// GetDEFAULT_USER_ROLE returns the DEFAULT_USER_ROLE field value
func (o *AdminConfig) GetDEFAULT_USER_ROLE() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DEFAULT_USER_ROLE
}

// GetDEFAULT_USER_ROLEOk returns a tuple with the DEFAULT_USER_ROLE field value
// and a boolean to check if the value has been set.
func (o *AdminConfig) GetDEFAULT_USER_ROLEOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DEFAULT_USER_ROLE, true
}

// SetDEFAULT_USER_ROLE sets field value
func (o *AdminConfig) SetDEFAULT_USER_ROLE(v string) {
	o.DEFAULT_USER_ROLE = v
}

// GetJWT_EXPIRES_IN returns the JWT_EXPIRES_IN field value
func (o *AdminConfig) GetJWT_EXPIRES_IN() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.JWT_EXPIRES_IN
}

// GetJWT_EXPIRES_INOk returns a tuple with the JWT_EXPIRES_IN field value
// and a boolean to check if the value has been set.
func (o *AdminConfig) GetJWT_EXPIRES_INOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.JWT_EXPIRES_IN, true
}

// SetJWT_EXPIRES_IN sets field value
func (o *AdminConfig) SetJWT_EXPIRES_IN(v string) {
	o.JWT_EXPIRES_IN = v
}

// GetENABLE_COMMUNITY_SHARING returns the ENABLE_COMMUNITY_SHARING field value
func (o *AdminConfig) GetENABLE_COMMUNITY_SHARING() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ENABLE_COMMUNITY_SHARING
}

// GetENABLE_COMMUNITY_SHARINGOk returns a tuple with the ENABLE_COMMUNITY_SHARING field value
// and a boolean to check if the value has been set.
func (o *AdminConfig) GetENABLE_COMMUNITY_SHARINGOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ENABLE_COMMUNITY_SHARING, true
}

// SetENABLE_COMMUNITY_SHARING sets field value
func (o *AdminConfig) SetENABLE_COMMUNITY_SHARING(v bool) {
	o.ENABLE_COMMUNITY_SHARING = v
}

// GetENABLE_MESSAGE_RATING returns the ENABLE_MESSAGE_RATING field value
func (o *AdminConfig) GetENABLE_MESSAGE_RATING() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.ENABLE_MESSAGE_RATING
}

// GetENABLE_MESSAGE_RATINGOk returns a tuple with the ENABLE_MESSAGE_RATING field value
// and a boolean to check if the value has been set.
func (o *AdminConfig) GetENABLE_MESSAGE_RATINGOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ENABLE_MESSAGE_RATING, true
}

// SetENABLE_MESSAGE_RATING sets field value
func (o *AdminConfig) SetENABLE_MESSAGE_RATING(v bool) {
	o.ENABLE_MESSAGE_RATING = v
}

func (o AdminConfig) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AdminConfig) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["SHOW_ADMIN_DETAILS"] = o.SHOW_ADMIN_DETAILS
	toSerialize["ENABLE_SIGNUP"] = o.ENABLE_SIGNUP
	toSerialize["ENABLE_API_KEY"] = o.ENABLE_API_KEY
	toSerialize["DEFAULT_USER_ROLE"] = o.DEFAULT_USER_ROLE
	toSerialize["JWT_EXPIRES_IN"] = o.JWT_EXPIRES_IN
	toSerialize["ENABLE_COMMUNITY_SHARING"] = o.ENABLE_COMMUNITY_SHARING
	toSerialize["ENABLE_MESSAGE_RATING"] = o.ENABLE_MESSAGE_RATING
	return toSerialize, nil
}

func (o *AdminConfig) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"SHOW_ADMIN_DETAILS",
		"ENABLE_SIGNUP",
		"ENABLE_API_KEY",
		"DEFAULT_USER_ROLE",
		"JWT_EXPIRES_IN",
		"ENABLE_COMMUNITY_SHARING",
		"ENABLE_MESSAGE_RATING",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varAdminConfig := _AdminConfig{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varAdminConfig)

	if err != nil {
		return err
	}

	*o = AdminConfig(varAdminConfig)

	return err
}

type NullableAdminConfig struct {
	value *AdminConfig
	isSet bool
}

func (v NullableAdminConfig) Get() *AdminConfig {
	return v.value
}

func (v *NullableAdminConfig) Set(val *AdminConfig) {
	v.value = val
	v.isSet = true
}

func (v NullableAdminConfig) IsSet() bool {
	return v.isSet
}

func (v *NullableAdminConfig) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAdminConfig(val *AdminConfig) *NullableAdminConfig {
	return &NullableAdminConfig{value: val, isSet: true}
}

func (v NullableAdminConfig) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAdminConfig) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


