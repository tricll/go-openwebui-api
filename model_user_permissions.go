/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the UserPermissions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UserPermissions{}

// UserPermissions struct for UserPermissions
type UserPermissions struct {
	Workspace WorkspacePermissions `json:"workspace"`
	Chat ChatPermissions `json:"chat"`
}

type _UserPermissions UserPermissions

// NewUserPermissions instantiates a new UserPermissions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUserPermissions(workspace WorkspacePermissions, chat ChatPermissions) *UserPermissions {
	this := UserPermissions{}
	this.Workspace = workspace
	this.Chat = chat
	return &this
}

// NewUserPermissionsWithDefaults instantiates a new UserPermissions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserPermissionsWithDefaults() *UserPermissions {
	this := UserPermissions{}
	return &this
}

// GetWorkspace returns the Workspace field value
func (o *UserPermissions) GetWorkspace() WorkspacePermissions {
	if o == nil {
		var ret WorkspacePermissions
		return ret
	}

	return o.Workspace
}

// GetWorkspaceOk returns a tuple with the Workspace field value
// and a boolean to check if the value has been set.
func (o *UserPermissions) GetWorkspaceOk() (*WorkspacePermissions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Workspace, true
}

// SetWorkspace sets field value
func (o *UserPermissions) SetWorkspace(v WorkspacePermissions) {
	o.Workspace = v
}

// GetChat returns the Chat field value
func (o *UserPermissions) GetChat() ChatPermissions {
	if o == nil {
		var ret ChatPermissions
		return ret
	}

	return o.Chat
}

// GetChatOk returns a tuple with the Chat field value
// and a boolean to check if the value has been set.
func (o *UserPermissions) GetChatOk() (*ChatPermissions, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Chat, true
}

// SetChat sets field value
func (o *UserPermissions) SetChat(v ChatPermissions) {
	o.Chat = v
}

func (o UserPermissions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UserPermissions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["workspace"] = o.Workspace
	toSerialize["chat"] = o.Chat
	return toSerialize, nil
}

func (o *UserPermissions) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"workspace",
		"chat",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varUserPermissions := _UserPermissions{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varUserPermissions)

	if err != nil {
		return err
	}

	*o = UserPermissions(varUserPermissions)

	return err
}

type NullableUserPermissions struct {
	value *UserPermissions
	isSet bool
}

func (v NullableUserPermissions) Get() *UserPermissions {
	return v.value
}

func (v *NullableUserPermissions) Set(val *UserPermissions) {
	v.value = val
	v.isSet = true
}

func (v NullableUserPermissions) IsSet() bool {
	return v.isSet
}

func (v *NullableUserPermissions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUserPermissions(val *UserPermissions) *NullableUserPermissions {
	return &NullableUserPermissions{value: val, isSet: true}
}

func (v NullableUserPermissions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUserPermissions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


