/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ModelMeta type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelMeta{}

// ModelMeta struct for ModelMeta
type ModelMeta struct {
	ProfileImageUrl *ProfileImageUrl `json:"profile_image_url,omitempty"`
	Description *Description `json:"description,omitempty"`
	Capabilities *Capabilities `json:"capabilities,omitempty"`
	AdditionalProperties map[string]interface{}
}

type _ModelMeta ModelMeta

// NewModelMeta instantiates a new ModelMeta object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelMeta() *ModelMeta {
	this := ModelMeta{}
	var profileImageUrl ProfileImageUrl = /static/favicon.png
	this.ProfileImageUrl = &profileImageUrl
	return &this
}

// NewModelMetaWithDefaults instantiates a new ModelMeta object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelMetaWithDefaults() *ModelMeta {
	this := ModelMeta{}
	var profileImageUrl ProfileImageUrl = /static/favicon.png
	this.ProfileImageUrl = &profileImageUrl
	return &this
}

// GetProfileImageUrl returns the ProfileImageUrl field value if set, zero value otherwise.
func (o *ModelMeta) GetProfileImageUrl() ProfileImageUrl {
	if o == nil || IsNil(o.ProfileImageUrl) {
		var ret ProfileImageUrl
		return ret
	}
	return *o.ProfileImageUrl
}

// GetProfileImageUrlOk returns a tuple with the ProfileImageUrl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMeta) GetProfileImageUrlOk() (*ProfileImageUrl, bool) {
	if o == nil || IsNil(o.ProfileImageUrl) {
		return nil, false
	}
	return o.ProfileImageUrl, true
}

// HasProfileImageUrl returns a boolean if a field has been set.
func (o *ModelMeta) HasProfileImageUrl() bool {
	if o != nil && !IsNil(o.ProfileImageUrl) {
		return true
	}

	return false
}

// SetProfileImageUrl gets a reference to the given ProfileImageUrl and assigns it to the ProfileImageUrl field.
func (o *ModelMeta) SetProfileImageUrl(v ProfileImageUrl) {
	o.ProfileImageUrl = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *ModelMeta) GetDescription() Description {
	if o == nil || IsNil(o.Description) {
		var ret Description
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMeta) GetDescriptionOk() (*Description, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *ModelMeta) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given Description and assigns it to the Description field.
func (o *ModelMeta) SetDescription(v Description) {
	o.Description = &v
}

// GetCapabilities returns the Capabilities field value if set, zero value otherwise.
func (o *ModelMeta) GetCapabilities() Capabilities {
	if o == nil || IsNil(o.Capabilities) {
		var ret Capabilities
		return ret
	}
	return *o.Capabilities
}

// GetCapabilitiesOk returns a tuple with the Capabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ModelMeta) GetCapabilitiesOk() (*Capabilities, bool) {
	if o == nil || IsNil(o.Capabilities) {
		return nil, false
	}
	return o.Capabilities, true
}

// HasCapabilities returns a boolean if a field has been set.
func (o *ModelMeta) HasCapabilities() bool {
	if o != nil && !IsNil(o.Capabilities) {
		return true
	}

	return false
}

// SetCapabilities gets a reference to the given Capabilities and assigns it to the Capabilities field.
func (o *ModelMeta) SetCapabilities(v Capabilities) {
	o.Capabilities = &v
}

func (o ModelMeta) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelMeta) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ProfileImageUrl) {
		toSerialize["profile_image_url"] = o.ProfileImageUrl
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if !IsNil(o.Capabilities) {
		toSerialize["capabilities"] = o.Capabilities
	}

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ModelMeta) UnmarshalJSON(data []byte) (err error) {
	varModelMeta := _ModelMeta{}

	err = json.Unmarshal(data, &varModelMeta)

	if err != nil {
		return err
	}

	*o = ModelMeta(varModelMeta)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "profile_image_url")
		delete(additionalProperties, "description")
		delete(additionalProperties, "capabilities")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableModelMeta struct {
	value *ModelMeta
	isSet bool
}

func (v NullableModelMeta) Get() *ModelMeta {
	return v.value
}

func (v *NullableModelMeta) Set(val *ModelMeta) {
	v.value = val
	v.isSet = true
}

func (v NullableModelMeta) IsSet() bool {
	return v.isSet
}

func (v *NullableModelMeta) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelMeta(val *ModelMeta) *NullableModelMeta {
	return &NullableModelMeta{value: val, isSet: true}
}

func (v NullableModelMeta) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelMeta) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


