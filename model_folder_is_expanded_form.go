/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the FolderIsExpandedForm type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FolderIsExpandedForm{}

// FolderIsExpandedForm struct for FolderIsExpandedForm
type FolderIsExpandedForm struct {
	IsExpanded bool `json:"is_expanded"`
}

type _FolderIsExpandedForm FolderIsExpandedForm

// NewFolderIsExpandedForm instantiates a new FolderIsExpandedForm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFolderIsExpandedForm(isExpanded bool) *FolderIsExpandedForm {
	this := FolderIsExpandedForm{}
	this.IsExpanded = isExpanded
	return &this
}

// NewFolderIsExpandedFormWithDefaults instantiates a new FolderIsExpandedForm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFolderIsExpandedFormWithDefaults() *FolderIsExpandedForm {
	this := FolderIsExpandedForm{}
	return &this
}

// GetIsExpanded returns the IsExpanded field value
func (o *FolderIsExpandedForm) GetIsExpanded() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsExpanded
}

// GetIsExpandedOk returns a tuple with the IsExpanded field value
// and a boolean to check if the value has been set.
func (o *FolderIsExpandedForm) GetIsExpandedOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsExpanded, true
}

// SetIsExpanded sets field value
func (o *FolderIsExpandedForm) SetIsExpanded(v bool) {
	o.IsExpanded = v
}

func (o FolderIsExpandedForm) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FolderIsExpandedForm) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["is_expanded"] = o.IsExpanded
	return toSerialize, nil
}

func (o *FolderIsExpandedForm) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"is_expanded",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varFolderIsExpandedForm := _FolderIsExpandedForm{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varFolderIsExpandedForm)

	if err != nil {
		return err
	}

	*o = FolderIsExpandedForm(varFolderIsExpandedForm)

	return err
}

type NullableFolderIsExpandedForm struct {
	value *FolderIsExpandedForm
	isSet bool
}

func (v NullableFolderIsExpandedForm) Get() *FolderIsExpandedForm {
	return v.value
}

func (v *NullableFolderIsExpandedForm) Set(val *FolderIsExpandedForm) {
	v.value = val
	v.isSet = true
}

func (v NullableFolderIsExpandedForm) IsSet() bool {
	return v.isSet
}

func (v *NullableFolderIsExpandedForm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFolderIsExpandedForm(val *FolderIsExpandedForm) *NullableFolderIsExpandedForm {
	return &NullableFolderIsExpandedForm{value: val, isSet: true}
}

func (v NullableFolderIsExpandedForm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFolderIsExpandedForm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


