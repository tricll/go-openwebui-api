/*
FastAPI

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 0.1.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openwebuiapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ModelModel type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ModelModel{}

// ModelModel struct for ModelModel
type ModelModel struct {
	Id string `json:"id"`
	UserId string `json:"user_id"`
	BaseModelId NullableString `json:"base_model_id,omitempty"`
	Name string `json:"name"`
	Params map[string]interface{} `json:"params"`
	Meta ModelMeta `json:"meta"`
	AccessControl map[string]interface{} `json:"access_control,omitempty"`
	IsActive bool `json:"is_active"`
	UpdatedAt int32 `json:"updated_at"`
	CreatedAt int32 `json:"created_at"`
}

type _ModelModel ModelModel

// NewModelModel instantiates a new ModelModel object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewModelModel(id string, userId string, name string, params map[string]interface{}, meta ModelMeta, isActive bool, updatedAt int32, createdAt int32) *ModelModel {
	this := ModelModel{}
	this.Id = id
	this.UserId = userId
	this.Name = name
	this.Params = params
	this.Meta = meta
	this.IsActive = isActive
	this.UpdatedAt = updatedAt
	this.CreatedAt = createdAt
	return &this
}

// NewModelModelWithDefaults instantiates a new ModelModel object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewModelModelWithDefaults() *ModelModel {
	this := ModelModel{}
	return &this
}

// GetId returns the Id field value
func (o *ModelModel) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ModelModel) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ModelModel) SetId(v string) {
	o.Id = v
}

// GetUserId returns the UserId field value
func (o *ModelModel) GetUserId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.UserId
}

// GetUserIdOk returns a tuple with the UserId field value
// and a boolean to check if the value has been set.
func (o *ModelModel) GetUserIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UserId, true
}

// SetUserId sets field value
func (o *ModelModel) SetUserId(v string) {
	o.UserId = v
}

// GetBaseModelId returns the BaseModelId field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelModel) GetBaseModelId() string {
	if o == nil || IsNil(o.BaseModelId.Get()) {
		var ret string
		return ret
	}
	return *o.BaseModelId.Get()
}

// GetBaseModelIdOk returns a tuple with the BaseModelId field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelModel) GetBaseModelIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.BaseModelId.Get(), o.BaseModelId.IsSet()
}

// HasBaseModelId returns a boolean if a field has been set.
func (o *ModelModel) HasBaseModelId() bool {
	if o != nil && o.BaseModelId.IsSet() {
		return true
	}

	return false
}

// SetBaseModelId gets a reference to the given NullableString and assigns it to the BaseModelId field.
func (o *ModelModel) SetBaseModelId(v string) {
	o.BaseModelId.Set(&v)
}
// SetBaseModelIdNil sets the value for BaseModelId to be an explicit nil
func (o *ModelModel) SetBaseModelIdNil() {
	o.BaseModelId.Set(nil)
}

// UnsetBaseModelId ensures that no value is present for BaseModelId, not even an explicit nil
func (o *ModelModel) UnsetBaseModelId() {
	o.BaseModelId.Unset()
}

// GetName returns the Name field value
func (o *ModelModel) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *ModelModel) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *ModelModel) SetName(v string) {
	o.Name = v
}

// GetParams returns the Params field value
func (o *ModelModel) GetParams() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}

	return o.Params
}

// GetParamsOk returns a tuple with the Params field value
// and a boolean to check if the value has been set.
func (o *ModelModel) GetParamsOk() (map[string]interface{}, bool) {
	if o == nil {
		return map[string]interface{}{}, false
	}
	return o.Params, true
}

// SetParams sets field value
func (o *ModelModel) SetParams(v map[string]interface{}) {
	o.Params = v
}

// GetMeta returns the Meta field value
func (o *ModelModel) GetMeta() ModelMeta {
	if o == nil {
		var ret ModelMeta
		return ret
	}

	return o.Meta
}

// GetMetaOk returns a tuple with the Meta field value
// and a boolean to check if the value has been set.
func (o *ModelModel) GetMetaOk() (*ModelMeta, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Meta, true
}

// SetMeta sets field value
func (o *ModelModel) SetMeta(v ModelMeta) {
	o.Meta = v
}

// GetAccessControl returns the AccessControl field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ModelModel) GetAccessControl() map[string]interface{} {
	if o == nil {
		var ret map[string]interface{}
		return ret
	}
	return o.AccessControl
}

// GetAccessControlOk returns a tuple with the AccessControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ModelModel) GetAccessControlOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.AccessControl) {
		return map[string]interface{}{}, false
	}
	return o.AccessControl, true
}

// HasAccessControl returns a boolean if a field has been set.
func (o *ModelModel) HasAccessControl() bool {
	if o != nil && !IsNil(o.AccessControl) {
		return true
	}

	return false
}

// SetAccessControl gets a reference to the given map[string]interface{} and assigns it to the AccessControl field.
func (o *ModelModel) SetAccessControl(v map[string]interface{}) {
	o.AccessControl = v
}

// GetIsActive returns the IsActive field value
func (o *ModelModel) GetIsActive() bool {
	if o == nil {
		var ret bool
		return ret
	}

	return o.IsActive
}

// GetIsActiveOk returns a tuple with the IsActive field value
// and a boolean to check if the value has been set.
func (o *ModelModel) GetIsActiveOk() (*bool, bool) {
	if o == nil {
		return nil, false
	}
	return &o.IsActive, true
}

// SetIsActive sets field value
func (o *ModelModel) SetIsActive(v bool) {
	o.IsActive = v
}

// GetUpdatedAt returns the UpdatedAt field value
func (o *ModelModel) GetUpdatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value
// and a boolean to check if the value has been set.
func (o *ModelModel) GetUpdatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdatedAt, true
}

// SetUpdatedAt sets field value
func (o *ModelModel) SetUpdatedAt(v int32) {
	o.UpdatedAt = v
}

// GetCreatedAt returns the CreatedAt field value
func (o *ModelModel) GetCreatedAt() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value
// and a boolean to check if the value has been set.
func (o *ModelModel) GetCreatedAtOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreatedAt, true
}

// SetCreatedAt sets field value
func (o *ModelModel) SetCreatedAt(v int32) {
	o.CreatedAt = v
}

func (o ModelModel) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ModelModel) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["user_id"] = o.UserId
	if o.BaseModelId.IsSet() {
		toSerialize["base_model_id"] = o.BaseModelId.Get()
	}
	toSerialize["name"] = o.Name
	toSerialize["params"] = o.Params
	toSerialize["meta"] = o.Meta
	if o.AccessControl != nil {
		toSerialize["access_control"] = o.AccessControl
	}
	toSerialize["is_active"] = o.IsActive
	toSerialize["updated_at"] = o.UpdatedAt
	toSerialize["created_at"] = o.CreatedAt
	return toSerialize, nil
}

func (o *ModelModel) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"user_id",
		"name",
		"params",
		"meta",
		"is_active",
		"updated_at",
		"created_at",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varModelModel := _ModelModel{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varModelModel)

	if err != nil {
		return err
	}

	*o = ModelModel(varModelModel)

	return err
}

type NullableModelModel struct {
	value *ModelModel
	isSet bool
}

func (v NullableModelModel) Get() *ModelModel {
	return v.value
}

func (v *NullableModelModel) Set(val *ModelModel) {
	v.value = val
	v.isSet = true
}

func (v NullableModelModel) IsSet() bool {
	return v.isSet
}

func (v *NullableModelModel) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableModelModel(val *ModelModel) *NullableModelModel {
	return &NullableModelModel{value: val, isSet: true}
}

func (v NullableModelModel) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableModelModel) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


